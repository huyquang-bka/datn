# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import base64
import json

import cv2
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject, QTimer
from PyQt5.QtGui import QPixmap

import utilities
import widget_layout_setup
from widget_camera_item import Widget_Camera_Item
from widget_layout_setup import Widget_Layout_Setup

from vehicle import Vehicle_Form


class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()

        self.setupUi()

        self.infor_veh = []

        self.infor_res = {}

        # Enable Drag Drop
        self.setAcceptDrops(True)

        self.wg_camera_items = []
        self.wg_layout_setup = Widget_Layout_Setup()
        self.grid_layout_cameras = QtWidgets.QGridLayout()
        self.grid_layout_cameras.setContentsMargins(0, 0, 0, 0)
        self.frame_cameras.setLayout(self.grid_layout_cameras)
        # self.wg = Widget_Camera_Item()
        self.connect_signals()
        self.show()

        self.rows = 0
        self.columns = 0
        self.cam_index = None
        self.is_display = False
        self.feature_code = None
        self.rtsp_link = ''

        self.list_json = []

        self.list_wg = []

        self.thread_veh = Process_Infor()

        # self.wg.sig_infor_veh.connect(self.slot_get_vehicle_info)

    # def paintEvent(self, event):
    #     self.qlabel_plate.setText('aaa')
    #
    #     self.update()

    # __________Drag & Drop Slots
    def dragEnterEvent(self, e):
        e.accept()

    def dropEvent(self, e):
        pos = e.pos()
        src_widget = e.source()
        src_index = self.grid_layout_cameras.indexOf(src_widget)
        src_row, src_col, src_1, src_2 = self.grid_layout_cameras.getItemPosition(src_index)

        for n in range(len(self.wg_camera_items)):
            dst_widget = self.wg_camera_items[n]
            dst_rect = dst_widget.rect()

            dst_index = self.grid_layout_cameras.indexOf(dst_widget)
            dst_row, dst_col, dst_1, dst_2 = self.grid_layout_cameras.getItemPosition(dst_index)
            dst_pos = QtCore.QPoint(dst_col * dst_widget.width(), dst_row * dst_widget.height())
            dst_rect = QtCore.QRect(dst_pos.x(), dst_pos.y(), dst_rect.width(), dst_rect.height())

            if utilities.QT_pointInRect(pos, dst_rect):
                self.grid_layout_cameras.removeWidget(src_widget)
                self.grid_layout_cameras.removeWidget(dst_widget)
                self.grid_layout_cameras.addWidget(src_widget, dst_row, dst_col)
                self.grid_layout_cameras.addWidget(dst_widget, src_row, src_col)
                break

        e.accept()

    def slot_get_vehicle_info(self, infor_vh, infor_res):
        self.infor_veh = infor_vh
        self.infor_res = infor_res

        self.thread_veh.setup(self.infor_veh, self.list_wg, self.infor_res)
        self.thread_veh.start()

        # if self.infor_veh:
        #     wg_veh_infor = Vehicle_Form()
        #     wg_veh_infor.setMinimumSize(QtCore.QSize(230, 196))
        #     wg_veh_infor.setMaximumSize(QtCore.QSize(230, 196))
        #
        #     self.list_wg.insert(0, wg_veh_infor)
        #
        #     wg_veh_infor.qlabel_brand.setText(self.infor_veh[0])
        #     wg_veh_infor.qlabel_color.setText(self.infor_veh[1])
        #     wg_veh_infor.qlabel_plate.setText(self.infor_veh[2])
        #     wg_veh_infor.qlabel_speed.setText('{} km/h'.format(self.infor_veh[4]))
        #     wg_veh_infor.qlabel_owner_res.setText('owner: {}'.format(self.infor_res['owner']))
        #     wg_veh_infor.qlabel_brand_res.setText('brand: {}'.format(self.infor_res['brand']))
        #     wg_veh_infor.qlabel_color_res.setText('color: {}'.format(self.infor_res['color']))
        #
        #     if self.infor_res['brand'] != self.infor_veh[0] or self.infor_res['color'] != self.infor_veh[1]:
        #         wg_veh_infor.qlabel_registration.setStyleSheet("background: red")
        #
        #     rgb_img = cv2.cvtColor(self.infor_veh[3], cv2.COLOR_BGR2RGB)
        #     # rgb_img = self.img.copy()
        #     qt_img = QPixmap.fromImage(
        #         QtGui.QImage(rgb_img.data, rgb_img.shape[1], rgb_img.shape[0], QtGui.QImage.Format_RGB888)).scaled(
        #         wg_veh_infor.qlabel_icon_car.width(), wg_veh_infor.qlabel_icon_car.height())
        #     wg_veh_infor.qlabel_icon_car.setPixmap(qt_img)
        #
        #     if len(self.list_wg) > 10:
        #         self.remove_event_widget()
        #         # self.scrollAreaWidgetContents.layout().removeWidget(self.list_wg[-1])
        #
        #     if len(self.list_wg) <= 10:
        #         for wg in self.list_wg:
        #             self.add_event_widget(wg)

        self.update()

    # __________Finish Drag & Drop Slots
    def show_cam_choose(self, ):

        for cam in self.wg_camera_items:
            if cam.is_display:
                print('feature:', cam.feature_code)
                print("rtsp:", cam.rtsp_link)
                cam.show_cameras(cam.feature_code, cam.rtsp_link)

    def destroy_all_cameras(self):
        for c in self.wg_camera_items:
            self.grid_layout_cameras.removeWidget(c)
        self.wg_camera_items.clear()

    def setup_camera_layout(self, rows, cols):
        self.rows = rows
        self.columns = cols
        self.destroy_all_cameras()
        for i in range(rows):  # rows
            for j in range(cols):  # cols
                self.grid_layout_cameras.addWidget(self.slot_add_camera(), i, j)

    def connect_signals(self):
        # self
        # self.btn_add_camera.clicked.connect(self.slot_add_camera)
        self.btn_setup_layout.clicked.connect(self.slot_setup_layout)
        # widget setup layout
        self.wg_layout_setup.sig_apply_apply_layout.connect(self.slot_apply_layout)
        self.btn_start_app.clicked.connect(self.show_cam_choose)

        # self.btn_camera_info.clicked.connect(self.slot_show_camera_info)

    def slot_add_camera(self):
        cam_i = Widget_Camera_Item()
        self.wg_camera_items.append(cam_i)
        cam_i.sig_new_cam_inf.connect(self.slot_new_cam_inf)
        cam_i.sig_cancel_add_cam.connect(self.slot_cancel_add_new_cam)
        cam_i.group_settings.hide()
        cam_i.slot_apply()
        cam_i.sig_infor_veh.connect(self.slot_get_vehicle_info)
        cam_i.sig_count.connect(self.slot_get_cout_veh)

        return cam_i

    def slot_setup_layout(self):
        self.wg_layout_setup.show()

    def slot_get_cout_veh(self, count):
        self.qlabel_vehicle_count.setText(str(count))

    def slot_apply_layout(self, rows, cols):
        self.setup_camera_layout(rows, cols)

    def slot_new_cam_inf(self, cam_index_, rtsp_, feature_, is_display_):
        cam_i = self.sender()
        # self.qlabel_vehicle_count.setText(str(len(self.wg_camera_items)))

        self.cam_index = cam_index_
        self.is_display = is_display_
        self.feature_code = feature_
        self.rtsp_link = rtsp_
        dict_cam_inf = {'camera_id': cam_index_, 'rtsp_url': rtsp_, 'feature': feature_, 'is_show': is_display_}
        self.list_json.append(dict_cam_inf)
        with open('camera.json', 'w') as f:
            json.dump(self.list_json, f)

    def add_event_widget(self, widget):
        self.scrollAreaWidgetContents.layout().addWidget(widget)

    def remove_event_widget(self):
        self.list_wg[-1].setParent(None)
        self.list_wg[-1].deleteLater()
        self.list_wg.remove(self.list_wg[-1])

    def slot_cancel_add_new_cam(self):
        pass

    def setupUi(self):
        self.setObjectName("MainWindow")
        self.resize(907, 695)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.layout_main = QtWidgets.QGridLayout(self.centralwidget)
        self.layout_main.setObjectName("layout_main")
        self.menu = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.menu.sizePolicy().hasHeightForWidth())
        self.menu.setSizePolicy(sizePolicy)
        self.menu.setMinimumSize(QtCore.QSize(256, 0))
        self.menu.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.menu.setFrameShadow(QtWidgets.QFrame.Raised)
        self.menu.setObjectName("menu")
        self.gridLayout = QtWidgets.QGridLayout(self.menu)
        self.gridLayout.setObjectName("gridLayout")
        self.qlabel_logo_atin = QtWidgets.QLabel(self.menu)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.qlabel_logo_atin.sizePolicy().hasHeightForWidth())
        self.qlabel_logo_atin.setSizePolicy(sizePolicy)
        self.qlabel_logo_atin.setMinimumSize(QtCore.QSize(0, 120))
        self.qlabel_logo_atin.setMaximumSize(QtCore.QSize(16777215, 120))
        self.qlabel_logo_atin.setStyleSheet("background: gray\n"
                                            "")
        self.qlabel_logo_atin.setText("")
        self.qlabel_logo_atin.setObjectName("qlabel_logo_atin")
        self.gridLayout.addWidget(self.qlabel_logo_atin, 0, 0, 1, 1)
        self.groupBox = QtWidgets.QGroupBox(self.menu)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
        self.groupBox.setSizePolicy(sizePolicy)
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.groupBox)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.qlabel_count = QtWidgets.QLabel(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.qlabel_count.sizePolicy().hasHeightForWidth())
        self.qlabel_count.setSizePolicy(sizePolicy)
        self.qlabel_count.setMinimumSize(QtCore.QSize(0, 40))
        self.qlabel_count.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.qlabel_count.setFont(font)
        self.qlabel_count.setStyleSheet("")
        self.qlabel_count.setAlignment(QtCore.Qt.AlignCenter)
        self.qlabel_count.setObjectName("qlabel_count")
        self.gridLayout_2.addWidget(self.qlabel_count, 0, 0, 1, 1)
        self.qlabel_vehicle_count = QtWidgets.QLabel(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.qlabel_vehicle_count.sizePolicy().hasHeightForWidth())
        self.qlabel_vehicle_count.setSizePolicy(sizePolicy)
        self.qlabel_vehicle_count.setMinimumSize(QtCore.QSize(0, 100))
        font = QtGui.QFont()
        font.setPointSize(26)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.qlabel_vehicle_count.setFont(font)
        self.qlabel_vehicle_count.setStyleSheet("background: black;\n"
                                                "color: white;")
        self.qlabel_vehicle_count.setAlignment(QtCore.Qt.AlignCenter)
        self.qlabel_vehicle_count.setObjectName("qlabel_vehicle_count")
        self.gridLayout_2.addWidget(self.qlabel_vehicle_count, 1, 0, 1, 1)
        self.gridLayout.addWidget(self.groupBox, 6, 0, 1, 1)
        self.btn_start_app = QtWidgets.QPushButton(self.menu)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_start_app.sizePolicy().hasHeightForWidth())
        self.btn_start_app.setSizePolicy(sizePolicy)
        self.btn_start_app.setMinimumSize(QtCore.QSize(0, 40))
        self.btn_start_app.setObjectName("btn_start_app")
        self.gridLayout.addWidget(self.btn_start_app, 3, 0, 1, 1)
        self.btn_setup_layout = QtWidgets.QPushButton(self.menu)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_setup_layout.sizePolicy().hasHeightForWidth())
        self.btn_setup_layout.setSizePolicy(sizePolicy)
        self.btn_setup_layout.setMinimumSize(QtCore.QSize(0, 40))
        self.btn_setup_layout.setObjectName("btn_setup_layout")
        self.gridLayout.addWidget(self.btn_setup_layout, 2, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 30, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        self.gridLayout.addItem(spacerItem, 1, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 30, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        self.gridLayout.addItem(spacerItem1, 4, 0, 1, 1)
        self.layout_main.addWidget(self.menu, 0, 0, 1, 1)
        self.frame_cameras = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_cameras.sizePolicy().hasHeightForWidth())
        self.frame_cameras.setSizePolicy(sizePolicy)
        self.frame_cameras.setStyleSheet("background: black")
        self.frame_cameras.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_cameras.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_cameras.setObjectName("frame_cameras")
        self.layout_main.addWidget(self.frame_cameras, 0, 1, 1, 1)
        self.scrollArea_info = QtWidgets.QScrollArea(self.centralwidget)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollArea_info.sizePolicy().hasHeightForWidth())
        self.scrollArea_info.setSizePolicy(sizePolicy)
        self.scrollArea_info.setMinimumSize(QtCore.QSize(0, 220))
        self.scrollArea_info.setWidgetResizable(True)
        self.scrollArea_info.setObjectName("scrollArea_info")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 887, 218))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.scrollArea_info.setWidget(self.scrollAreaWidgetContents)

        self.verticalLayout = QtWidgets.QHBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout.setObjectName("verticalLayout")
        self.layout_main.addWidget(self.scrollArea_info, 1, 0, 1, 2)
        self.setCentralWidget(self.centralwidget)

        # self.scrollAreaWidgetContents.setContentsMargins(0, 0, 0, 0)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.qlabel_count.setText(_translate("MainWindow", "Số lượng xe"))
        self.qlabel_vehicle_count.setText(_translate("MainWindow", "0"))
        self.btn_start_app.setText(_translate("MainWindow", "Start App"))
        self.btn_setup_layout.setText(_translate("MainWindow", "Setup Layout"))


class Process_Infor(QtCore.QThread):
    def __init__(self):
        super().__init__()
        self.infor_veh = None
        self.list_wg = None
        self.infor_res = None
        self.ui = Ui_MainWindow()

    def setup(self, infor_veh, list_wg, infor_res):
        self.infor_veh = infor_veh
        self.list_wg = list_wg
        self.infor_res = infor_res

    def run(self):
        if self.infor_veh:
            wg_veh_infor = Vehicle_Form()
            wg_veh_infor.setMinimumSize(QtCore.QSize(230, 196))
            wg_veh_infor.setMaximumSize(QtCore.QSize(230, 196))

            self.list_wg.insert(0, wg_veh_infor)

            wg_veh_infor.qlabel_brand.setText(self.infor_veh[0])
            wg_veh_infor.qlabel_color.setText(self.infor_veh[1])
            wg_veh_infor.qlabel_plate.setText(self.infor_veh[2])
            wg_veh_infor.qlabel_speed.setText('{} km/h'.format(self.infor_veh[4]))
            wg_veh_infor.qlabel_owner_res.setText('owner: {}'.format(self.infor_res['owner']))
            wg_veh_infor.qlabel_brand_res.setText('brand: {}'.format(self.infor_res['brand']))
            wg_veh_infor.qlabel_color_res.setText('color: {}'.format(self.infor_res['color']))

            img = self.infor_res['owner_img']
            img = base64.b64decode(img.encode('utf-8'))
            img = np.frombuffer(img, dtype=np.uint8)
            img = cv2.imdecode(img, cv2.IMREAD_COLOR)


            if self.infor_res['brand'] != self.infor_veh[0] or self.infor_res['color'] != self.infor_veh[1]:
                wg_veh_infor.qlabel_registration.setStyleSheet("background: red")

            rgb_img = cv2.cvtColor(self.infor_veh[3], cv2.COLOR_BGR2RGB)
            # rgb_img = self.img.copy()
            qt_img = QPixmap.fromImage(
                QtGui.QImage(rgb_img.data, rgb_img.shape[1], rgb_img.shape[0], QtGui.QImage.Format_RGB888)).scaled(
                wg_veh_infor.qlabel_icon_car.width(), wg_veh_infor.qlabel_icon_car.height())
            wg_veh_infor.qlabel_icon_car.setPixmap(qt_img)

            img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            img_owner = QPixmap.fromImage(
                QtGui.QImage(img_rgb.data, img_rgb.shape[1], img_rgb.shape[0], QtGui.QImage.Format_RGB888)).scaled(
                wg_veh_infor.qlabel_image_owner.width(), wg_veh_infor.qlabel_image_owner.height())
            wg_veh_infor.qlabel_image_owner.setPixmap(img_owner)

            if len(self.list_wg) > 10:
                self.ui.remove_event_widget()
                # self.scrollAreaWidgetContents.layout().removeWidget(self.list_wg[-1])
            if len(self.list_wg) <= 10:
                for wg in self.list_wg:
                    self.ui.add_event_widget(wg)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)

    ui = Ui_MainWindow()

    # ui.slot_get_vehicle_info()

    sys.exit(app.exec_())
